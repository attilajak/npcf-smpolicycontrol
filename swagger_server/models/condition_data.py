# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.date_time_rm import DateTimeRm  # noqa: F401,E501
from swagger_server import util


class ConditionData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, cond_id: str=None, activation_time: DateTimeRm=None, deactivation_time: DateTimeRm=None):  # noqa: E501
        """ConditionData - a model defined in Swagger

        :param cond_id: The cond_id of this ConditionData.  # noqa: E501
        :type cond_id: str
        :param activation_time: The activation_time of this ConditionData.  # noqa: E501
        :type activation_time: DateTimeRm
        :param deactivation_time: The deactivation_time of this ConditionData.  # noqa: E501
        :type deactivation_time: DateTimeRm
        """
        self.swagger_types = {
            'cond_id': str,
            'activation_time': DateTimeRm,
            'deactivation_time': DateTimeRm
        }

        self.attribute_map = {
            'cond_id': 'condId',
            'activation_time': 'activationTime',
            'deactivation_time': 'deactivationTime'
        }
        self._cond_id = cond_id
        self._activation_time = activation_time
        self._deactivation_time = deactivation_time

    @classmethod
    def from_dict(cls, dikt) -> 'ConditionData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ConditionData of this ConditionData.  # noqa: E501
        :rtype: ConditionData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cond_id(self) -> str:
        """Gets the cond_id of this ConditionData.

        Uniquely identifies the condition data within a PDU session.  # noqa: E501

        :return: The cond_id of this ConditionData.
        :rtype: str
        """
        return self._cond_id

    @cond_id.setter
    def cond_id(self, cond_id: str):
        """Sets the cond_id of this ConditionData.

        Uniquely identifies the condition data within a PDU session.  # noqa: E501

        :param cond_id: The cond_id of this ConditionData.
        :type cond_id: str
        """
        if cond_id is None:
            raise ValueError("Invalid value for `cond_id`, must not be `None`")  # noqa: E501

        self._cond_id = cond_id

    @property
    def activation_time(self) -> DateTimeRm:
        """Gets the activation_time of this ConditionData.


        :return: The activation_time of this ConditionData.
        :rtype: DateTimeRm
        """
        return self._activation_time

    @activation_time.setter
    def activation_time(self, activation_time: DateTimeRm):
        """Sets the activation_time of this ConditionData.


        :param activation_time: The activation_time of this ConditionData.
        :type activation_time: DateTimeRm
        """

        self._activation_time = activation_time

    @property
    def deactivation_time(self) -> DateTimeRm:
        """Gets the deactivation_time of this ConditionData.


        :return: The deactivation_time of this ConditionData.
        :rtype: DateTimeRm
        """
        return self._deactivation_time

    @deactivation_time.setter
    def deactivation_time(self, deactivation_time: DateTimeRm):
        """Sets the deactivation_time of this ConditionData.


        :param deactivation_time: The deactivation_time of this ConditionData.
        :type deactivation_time: DateTimeRm
        """

        self._deactivation_time = deactivation_time
