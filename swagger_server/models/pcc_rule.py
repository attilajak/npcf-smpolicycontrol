# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.af_sig_protocol import AfSigProtocol  # noqa: F401,E501
from swagger_server.models.content_version import ContentVersion  # noqa: F401,E501
from swagger_server.models.flow_information import FlowInformation  # noqa: F401,E501
from swagger_server.models.uinteger import Uinteger  # noqa: F401,E501
from swagger_server import util


class PccRule(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, flow_infos: List[FlowInformation]=None, app_id: str=None, cont_ver: ContentVersion=None, pcc_rule_id: str=None, precedence: Uinteger=None, af_sig_protocol: AfSigProtocol=None, app_reloc: bool=None, ref_qos_data: List[str]=None, ref_tc_data: List[str]=None, ref_chg_data: List[str]=None, ref_um_data: List[str]=None, ref_cond_data: str=None):  # noqa: E501
        """PccRule - a model defined in Swagger

        :param flow_infos: The flow_infos of this PccRule.  # noqa: E501
        :type flow_infos: List[FlowInformation]
        :param app_id: The app_id of this PccRule.  # noqa: E501
        :type app_id: str
        :param cont_ver: The cont_ver of this PccRule.  # noqa: E501
        :type cont_ver: ContentVersion
        :param pcc_rule_id: The pcc_rule_id of this PccRule.  # noqa: E501
        :type pcc_rule_id: str
        :param precedence: The precedence of this PccRule.  # noqa: E501
        :type precedence: Uinteger
        :param af_sig_protocol: The af_sig_protocol of this PccRule.  # noqa: E501
        :type af_sig_protocol: AfSigProtocol
        :param app_reloc: The app_reloc of this PccRule.  # noqa: E501
        :type app_reloc: bool
        :param ref_qos_data: The ref_qos_data of this PccRule.  # noqa: E501
        :type ref_qos_data: List[str]
        :param ref_tc_data: The ref_tc_data of this PccRule.  # noqa: E501
        :type ref_tc_data: List[str]
        :param ref_chg_data: The ref_chg_data of this PccRule.  # noqa: E501
        :type ref_chg_data: List[str]
        :param ref_um_data: The ref_um_data of this PccRule.  # noqa: E501
        :type ref_um_data: List[str]
        :param ref_cond_data: The ref_cond_data of this PccRule.  # noqa: E501
        :type ref_cond_data: str
        """
        self.swagger_types = {
            'flow_infos': List[FlowInformation],
            'app_id': str,
            'cont_ver': ContentVersion,
            'pcc_rule_id': str,
            'precedence': Uinteger,
            'af_sig_protocol': AfSigProtocol,
            'app_reloc': bool,
            'ref_qos_data': List[str],
            'ref_tc_data': List[str],
            'ref_chg_data': List[str],
            'ref_um_data': List[str],
            'ref_cond_data': str
        }

        self.attribute_map = {
            'flow_infos': 'flowInfos',
            'app_id': 'appId',
            'cont_ver': 'contVer',
            'pcc_rule_id': 'pccRuleId',
            'precedence': 'precedence',
            'af_sig_protocol': 'afSigProtocol',
            'app_reloc': 'appReloc',
            'ref_qos_data': 'refQosData',
            'ref_tc_data': 'refTcData',
            'ref_chg_data': 'refChgData',
            'ref_um_data': 'refUmData',
            'ref_cond_data': 'refCondData'
        }
        self._flow_infos = flow_infos
        self._app_id = app_id
        self._cont_ver = cont_ver
        self._pcc_rule_id = pcc_rule_id
        self._precedence = precedence
        self._af_sig_protocol = af_sig_protocol
        self._app_reloc = app_reloc
        self._ref_qos_data = ref_qos_data
        self._ref_tc_data = ref_tc_data
        self._ref_chg_data = ref_chg_data
        self._ref_um_data = ref_um_data
        self._ref_cond_data = ref_cond_data

    @classmethod
    def from_dict(cls, dikt) -> 'PccRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PccRule of this PccRule.  # noqa: E501
        :rtype: PccRule
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flow_infos(self) -> List[FlowInformation]:
        """Gets the flow_infos of this PccRule.

        An array of IP flow packet filter information.  # noqa: E501

        :return: The flow_infos of this PccRule.
        :rtype: List[FlowInformation]
        """
        return self._flow_infos

    @flow_infos.setter
    def flow_infos(self, flow_infos: List[FlowInformation]):
        """Sets the flow_infos of this PccRule.

        An array of IP flow packet filter information.  # noqa: E501

        :param flow_infos: The flow_infos of this PccRule.
        :type flow_infos: List[FlowInformation]
        """

        self._flow_infos = flow_infos

    @property
    def app_id(self) -> str:
        """Gets the app_id of this PccRule.

        A reference to the application detection filter configured at the UPF.  # noqa: E501

        :return: The app_id of this PccRule.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id: str):
        """Sets the app_id of this PccRule.

        A reference to the application detection filter configured at the UPF.  # noqa: E501

        :param app_id: The app_id of this PccRule.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def cont_ver(self) -> ContentVersion:
        """Gets the cont_ver of this PccRule.


        :return: The cont_ver of this PccRule.
        :rtype: ContentVersion
        """
        return self._cont_ver

    @cont_ver.setter
    def cont_ver(self, cont_ver: ContentVersion):
        """Sets the cont_ver of this PccRule.


        :param cont_ver: The cont_ver of this PccRule.
        :type cont_ver: ContentVersion
        """

        self._cont_ver = cont_ver

    @property
    def pcc_rule_id(self) -> str:
        """Gets the pcc_rule_id of this PccRule.

        Univocally identifies the PCC rule within a PDU session.  # noqa: E501

        :return: The pcc_rule_id of this PccRule.
        :rtype: str
        """
        return self._pcc_rule_id

    @pcc_rule_id.setter
    def pcc_rule_id(self, pcc_rule_id: str):
        """Sets the pcc_rule_id of this PccRule.

        Univocally identifies the PCC rule within a PDU session.  # noqa: E501

        :param pcc_rule_id: The pcc_rule_id of this PccRule.
        :type pcc_rule_id: str
        """
        if pcc_rule_id is None:
            raise ValueError("Invalid value for `pcc_rule_id`, must not be `None`")  # noqa: E501

        self._pcc_rule_id = pcc_rule_id

    @property
    def precedence(self) -> Uinteger:
        """Gets the precedence of this PccRule.


        :return: The precedence of this PccRule.
        :rtype: Uinteger
        """
        return self._precedence

    @precedence.setter
    def precedence(self, precedence: Uinteger):
        """Sets the precedence of this PccRule.


        :param precedence: The precedence of this PccRule.
        :type precedence: Uinteger
        """

        self._precedence = precedence

    @property
    def af_sig_protocol(self) -> AfSigProtocol:
        """Gets the af_sig_protocol of this PccRule.


        :return: The af_sig_protocol of this PccRule.
        :rtype: AfSigProtocol
        """
        return self._af_sig_protocol

    @af_sig_protocol.setter
    def af_sig_protocol(self, af_sig_protocol: AfSigProtocol):
        """Sets the af_sig_protocol of this PccRule.


        :param af_sig_protocol: The af_sig_protocol of this PccRule.
        :type af_sig_protocol: AfSigProtocol
        """

        self._af_sig_protocol = af_sig_protocol

    @property
    def app_reloc(self) -> bool:
        """Gets the app_reloc of this PccRule.

        Indication of application relocation possibility.  # noqa: E501

        :return: The app_reloc of this PccRule.
        :rtype: bool
        """
        return self._app_reloc

    @app_reloc.setter
    def app_reloc(self, app_reloc: bool):
        """Sets the app_reloc of this PccRule.

        Indication of application relocation possibility.  # noqa: E501

        :param app_reloc: The app_reloc of this PccRule.
        :type app_reloc: bool
        """

        self._app_reloc = app_reloc

    @property
    def ref_qos_data(self) -> List[str]:
        """Gets the ref_qos_data of this PccRule.

        A reference to the QoSData policy type decision type. It is the qosId described in subclause 5.6.2.8. (NOTE)  # noqa: E501

        :return: The ref_qos_data of this PccRule.
        :rtype: List[str]
        """
        return self._ref_qos_data

    @ref_qos_data.setter
    def ref_qos_data(self, ref_qos_data: List[str]):
        """Sets the ref_qos_data of this PccRule.

        A reference to the QoSData policy type decision type. It is the qosId described in subclause 5.6.2.8. (NOTE)  # noqa: E501

        :param ref_qos_data: The ref_qos_data of this PccRule.
        :type ref_qos_data: List[str]
        """

        self._ref_qos_data = ref_qos_data

    @property
    def ref_tc_data(self) -> List[str]:
        """Gets the ref_tc_data of this PccRule.

        A reference to the TrafficControlData policy decision type. It is the tcId described in subclause 5.6.2.10. (NOTE)  # noqa: E501

        :return: The ref_tc_data of this PccRule.
        :rtype: List[str]
        """
        return self._ref_tc_data

    @ref_tc_data.setter
    def ref_tc_data(self, ref_tc_data: List[str]):
        """Sets the ref_tc_data of this PccRule.

        A reference to the TrafficControlData policy decision type. It is the tcId described in subclause 5.6.2.10. (NOTE)  # noqa: E501

        :param ref_tc_data: The ref_tc_data of this PccRule.
        :type ref_tc_data: List[str]
        """

        self._ref_tc_data = ref_tc_data

    @property
    def ref_chg_data(self) -> List[str]:
        """Gets the ref_chg_data of this PccRule.

        A reference to the ChargingData policy decision type. It is the chgId described in subclause 5.6.2.11. (NOTE)  # noqa: E501

        :return: The ref_chg_data of this PccRule.
        :rtype: List[str]
        """
        return self._ref_chg_data

    @ref_chg_data.setter
    def ref_chg_data(self, ref_chg_data: List[str]):
        """Sets the ref_chg_data of this PccRule.

        A reference to the ChargingData policy decision type. It is the chgId described in subclause 5.6.2.11. (NOTE)  # noqa: E501

        :param ref_chg_data: The ref_chg_data of this PccRule.
        :type ref_chg_data: List[str]
        """

        self._ref_chg_data = ref_chg_data

    @property
    def ref_um_data(self) -> List[str]:
        """Gets the ref_um_data of this PccRule.

        A reference to UsageMonitoringData policy decision type. It is the umId described in subclause 5.6.2.12. (NOTE)  # noqa: E501

        :return: The ref_um_data of this PccRule.
        :rtype: List[str]
        """
        return self._ref_um_data

    @ref_um_data.setter
    def ref_um_data(self, ref_um_data: List[str]):
        """Sets the ref_um_data of this PccRule.

        A reference to UsageMonitoringData policy decision type. It is the umId described in subclause 5.6.2.12. (NOTE)  # noqa: E501

        :param ref_um_data: The ref_um_data of this PccRule.
        :type ref_um_data: List[str]
        """

        self._ref_um_data = ref_um_data

    @property
    def ref_cond_data(self) -> str:
        """Gets the ref_cond_data of this PccRule.

        A reference to the condition data. It is the condId described in subclause 5.6.2.9.  # noqa: E501

        :return: The ref_cond_data of this PccRule.
        :rtype: str
        """
        return self._ref_cond_data

    @ref_cond_data.setter
    def ref_cond_data(self, ref_cond_data: str):
        """Sets the ref_cond_data of this PccRule.

        A reference to the condition data. It is the condId described in subclause 5.6.2.9.  # noqa: E501

        :param ref_cond_data: The ref_cond_data of this PccRule.
        :type ref_cond_data: str
        """

        self._ref_cond_data = ref_cond_data
