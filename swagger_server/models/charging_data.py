# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.charging_id import ChargingId  # noqa: F401,E501
from swagger_server.models.metering_method import MeteringMethod  # noqa: F401,E501
from swagger_server.models.rating_group import RatingGroup  # noqa: F401,E501
from swagger_server.models.reporting_level import ReportingLevel  # noqa: F401,E501
from swagger_server.models.service_id import ServiceId  # noqa: F401,E501
from swagger_server import util


class ChargingData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, chg_id: str=None, metering_method: MeteringMethod=None, offline: bool=None, online: bool=None, sdf_handl: bool=None, rating_group: RatingGroup=None, reporting_level: ReportingLevel=None, service_id: ServiceId=None, sponsor_id: str=None, app_svc_prov_id: str=None, af_charging_identifier: ChargingId=None):  # noqa: E501
        """ChargingData - a model defined in Swagger

        :param chg_id: The chg_id of this ChargingData.  # noqa: E501
        :type chg_id: str
        :param metering_method: The metering_method of this ChargingData.  # noqa: E501
        :type metering_method: MeteringMethod
        :param offline: The offline of this ChargingData.  # noqa: E501
        :type offline: bool
        :param online: The online of this ChargingData.  # noqa: E501
        :type online: bool
        :param sdf_handl: The sdf_handl of this ChargingData.  # noqa: E501
        :type sdf_handl: bool
        :param rating_group: The rating_group of this ChargingData.  # noqa: E501
        :type rating_group: RatingGroup
        :param reporting_level: The reporting_level of this ChargingData.  # noqa: E501
        :type reporting_level: ReportingLevel
        :param service_id: The service_id of this ChargingData.  # noqa: E501
        :type service_id: ServiceId
        :param sponsor_id: The sponsor_id of this ChargingData.  # noqa: E501
        :type sponsor_id: str
        :param app_svc_prov_id: The app_svc_prov_id of this ChargingData.  # noqa: E501
        :type app_svc_prov_id: str
        :param af_charging_identifier: The af_charging_identifier of this ChargingData.  # noqa: E501
        :type af_charging_identifier: ChargingId
        """
        self.swagger_types = {
            'chg_id': str,
            'metering_method': MeteringMethod,
            'offline': bool,
            'online': bool,
            'sdf_handl': bool,
            'rating_group': RatingGroup,
            'reporting_level': ReportingLevel,
            'service_id': ServiceId,
            'sponsor_id': str,
            'app_svc_prov_id': str,
            'af_charging_identifier': ChargingId
        }

        self.attribute_map = {
            'chg_id': 'chgId',
            'metering_method': 'meteringMethod',
            'offline': 'offline',
            'online': 'online',
            'sdf_handl': 'sdfHandl',
            'rating_group': 'ratingGroup',
            'reporting_level': 'reportingLevel',
            'service_id': 'serviceId',
            'sponsor_id': 'sponsorId',
            'app_svc_prov_id': 'appSvcProvId',
            'af_charging_identifier': 'afChargingIdentifier'
        }
        self._chg_id = chg_id
        self._metering_method = metering_method
        self._offline = offline
        self._online = online
        self._sdf_handl = sdf_handl
        self._rating_group = rating_group
        self._reporting_level = reporting_level
        self._service_id = service_id
        self._sponsor_id = sponsor_id
        self._app_svc_prov_id = app_svc_prov_id
        self._af_charging_identifier = af_charging_identifier

    @classmethod
    def from_dict(cls, dikt) -> 'ChargingData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChargingData of this ChargingData.  # noqa: E501
        :rtype: ChargingData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chg_id(self) -> str:
        """Gets the chg_id of this ChargingData.

        Univocally identifies the charging control policy data within a PDU session.  # noqa: E501

        :return: The chg_id of this ChargingData.
        :rtype: str
        """
        return self._chg_id

    @chg_id.setter
    def chg_id(self, chg_id: str):
        """Sets the chg_id of this ChargingData.

        Univocally identifies the charging control policy data within a PDU session.  # noqa: E501

        :param chg_id: The chg_id of this ChargingData.
        :type chg_id: str
        """
        if chg_id is None:
            raise ValueError("Invalid value for `chg_id`, must not be `None`")  # noqa: E501

        self._chg_id = chg_id

    @property
    def metering_method(self) -> MeteringMethod:
        """Gets the metering_method of this ChargingData.


        :return: The metering_method of this ChargingData.
        :rtype: MeteringMethod
        """
        return self._metering_method

    @metering_method.setter
    def metering_method(self, metering_method: MeteringMethod):
        """Sets the metering_method of this ChargingData.


        :param metering_method: The metering_method of this ChargingData.
        :type metering_method: MeteringMethod
        """

        self._metering_method = metering_method

    @property
    def offline(self) -> bool:
        """Gets the offline of this ChargingData.

        Indicates the offline charging is applicable to the PCC rule.  # noqa: E501

        :return: The offline of this ChargingData.
        :rtype: bool
        """
        return self._offline

    @offline.setter
    def offline(self, offline: bool):
        """Sets the offline of this ChargingData.

        Indicates the offline charging is applicable to the PCC rule.  # noqa: E501

        :param offline: The offline of this ChargingData.
        :type offline: bool
        """

        self._offline = offline

    @property
    def online(self) -> bool:
        """Gets the online of this ChargingData.

        Indicates the online charging is applicable to the PCC rule.  # noqa: E501

        :return: The online of this ChargingData.
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online: bool):
        """Sets the online of this ChargingData.

        Indicates the online charging is applicable to the PCC rule.  # noqa: E501

        :param online: The online of this ChargingData.
        :type online: bool
        """

        self._online = online

    @property
    def sdf_handl(self) -> bool:
        """Gets the sdf_handl of this ChargingData.

        Indicates whether the service data flow is allowed to start while the SMF is waiting for the response to the credit request.  # noqa: E501

        :return: The sdf_handl of this ChargingData.
        :rtype: bool
        """
        return self._sdf_handl

    @sdf_handl.setter
    def sdf_handl(self, sdf_handl: bool):
        """Sets the sdf_handl of this ChargingData.

        Indicates whether the service data flow is allowed to start while the SMF is waiting for the response to the credit request.  # noqa: E501

        :param sdf_handl: The sdf_handl of this ChargingData.
        :type sdf_handl: bool
        """

        self._sdf_handl = sdf_handl

    @property
    def rating_group(self) -> RatingGroup:
        """Gets the rating_group of this ChargingData.


        :return: The rating_group of this ChargingData.
        :rtype: RatingGroup
        """
        return self._rating_group

    @rating_group.setter
    def rating_group(self, rating_group: RatingGroup):
        """Sets the rating_group of this ChargingData.


        :param rating_group: The rating_group of this ChargingData.
        :type rating_group: RatingGroup
        """

        self._rating_group = rating_group

    @property
    def reporting_level(self) -> ReportingLevel:
        """Gets the reporting_level of this ChargingData.


        :return: The reporting_level of this ChargingData.
        :rtype: ReportingLevel
        """
        return self._reporting_level

    @reporting_level.setter
    def reporting_level(self, reporting_level: ReportingLevel):
        """Sets the reporting_level of this ChargingData.


        :param reporting_level: The reporting_level of this ChargingData.
        :type reporting_level: ReportingLevel
        """

        self._reporting_level = reporting_level

    @property
    def service_id(self) -> ServiceId:
        """Gets the service_id of this ChargingData.


        :return: The service_id of this ChargingData.
        :rtype: ServiceId
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id: ServiceId):
        """Sets the service_id of this ChargingData.


        :param service_id: The service_id of this ChargingData.
        :type service_id: ServiceId
        """

        self._service_id = service_id

    @property
    def sponsor_id(self) -> str:
        """Gets the sponsor_id of this ChargingData.

        Indicates the sponsor identity.  # noqa: E501

        :return: The sponsor_id of this ChargingData.
        :rtype: str
        """
        return self._sponsor_id

    @sponsor_id.setter
    def sponsor_id(self, sponsor_id: str):
        """Sets the sponsor_id of this ChargingData.

        Indicates the sponsor identity.  # noqa: E501

        :param sponsor_id: The sponsor_id of this ChargingData.
        :type sponsor_id: str
        """

        self._sponsor_id = sponsor_id

    @property
    def app_svc_prov_id(self) -> str:
        """Gets the app_svc_prov_id of this ChargingData.

        Indicates the application service provider identity.  # noqa: E501

        :return: The app_svc_prov_id of this ChargingData.
        :rtype: str
        """
        return self._app_svc_prov_id

    @app_svc_prov_id.setter
    def app_svc_prov_id(self, app_svc_prov_id: str):
        """Sets the app_svc_prov_id of this ChargingData.

        Indicates the application service provider identity.  # noqa: E501

        :param app_svc_prov_id: The app_svc_prov_id of this ChargingData.
        :type app_svc_prov_id: str
        """

        self._app_svc_prov_id = app_svc_prov_id

    @property
    def af_charging_identifier(self) -> ChargingId:
        """Gets the af_charging_identifier of this ChargingData.


        :return: The af_charging_identifier of this ChargingData.
        :rtype: ChargingId
        """
        return self._af_charging_identifier

    @af_charging_identifier.setter
    def af_charging_identifier(self, af_charging_identifier: ChargingId):
        """Sets the af_charging_identifier of this ChargingData.


        :param af_charging_identifier: The af_charging_identifier of this ChargingData.
        :type af_charging_identifier: ChargingId
        """

        self._af_charging_identifier = af_charging_identifier
