# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.flow_information import FlowInformation  # noqa: F401,E501
from swagger_server import util


class AppDetectionInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, app_id: str=None, instance_id: str=None, sdf_descriptions: List[FlowInformation]=None):  # noqa: E501
        """AppDetectionInfo - a model defined in Swagger

        :param app_id: The app_id of this AppDetectionInfo.  # noqa: E501
        :type app_id: str
        :param instance_id: The instance_id of this AppDetectionInfo.  # noqa: E501
        :type instance_id: str
        :param sdf_descriptions: The sdf_descriptions of this AppDetectionInfo.  # noqa: E501
        :type sdf_descriptions: List[FlowInformation]
        """
        self.swagger_types = {
            'app_id': str,
            'instance_id': str,
            'sdf_descriptions': List[FlowInformation]
        }

        self.attribute_map = {
            'app_id': 'appId',
            'instance_id': 'instanceId',
            'sdf_descriptions': 'sdfDescriptions'
        }
        self._app_id = app_id
        self._instance_id = instance_id
        self._sdf_descriptions = sdf_descriptions

    @classmethod
    def from_dict(cls, dikt) -> 'AppDetectionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AppDetectionInfo of this AppDetectionInfo.  # noqa: E501
        :rtype: AppDetectionInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self) -> str:
        """Gets the app_id of this AppDetectionInfo.

        A reference to the application detection filter configured at the UPF  # noqa: E501

        :return: The app_id of this AppDetectionInfo.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id: str):
        """Sets the app_id of this AppDetectionInfo.

        A reference to the application detection filter configured at the UPF  # noqa: E501

        :param app_id: The app_id of this AppDetectionInfo.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")  # noqa: E501

        self._app_id = app_id

    @property
    def instance_id(self) -> str:
        """Gets the instance_id of this AppDetectionInfo.

        Identifier sent by the SMF in order to allow correlation of application Start and Stop events to the specific service data flow description, if service data flow descriptions are deducible.  # noqa: E501

        :return: The instance_id of this AppDetectionInfo.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id: str):
        """Sets the instance_id of this AppDetectionInfo.

        Identifier sent by the SMF in order to allow correlation of application Start and Stop events to the specific service data flow description, if service data flow descriptions are deducible.  # noqa: E501

        :param instance_id: The instance_id of this AppDetectionInfo.
        :type instance_id: str
        """

        self._instance_id = instance_id

    @property
    def sdf_descriptions(self) -> List[FlowInformation]:
        """Gets the sdf_descriptions of this AppDetectionInfo.

        Contains the detected service data flow descriptions if they are deducible.  # noqa: E501

        :return: The sdf_descriptions of this AppDetectionInfo.
        :rtype: List[FlowInformation]
        """
        return self._sdf_descriptions

    @sdf_descriptions.setter
    def sdf_descriptions(self, sdf_descriptions: List[FlowInformation]):
        """Sets the sdf_descriptions of this AppDetectionInfo.

        Contains the detected service data flow descriptions if they are deducible.  # noqa: E501

        :param sdf_descriptions: The sdf_descriptions of this AppDetectionInfo.
        :type sdf_descriptions: List[FlowInformation]
        """

        self._sdf_descriptions = sdf_descriptions
