# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.flow_direction import FlowDirection  # noqa: F401,E501
from swagger_server.models.packet_filter_content import PacketFilterContent  # noqa: F401,E501
from swagger_server import util


class PacketFilterInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, pack_filt_id: str=None, pack_filt_cont: PacketFilterContent=None, tos_traffic_class: str=None, spi: str=None, flow_label: str=None, flow_direction: FlowDirection=None):  # noqa: E501
        """PacketFilterInfo - a model defined in Swagger

        :param pack_filt_id: The pack_filt_id of this PacketFilterInfo.  # noqa: E501
        :type pack_filt_id: str
        :param pack_filt_cont: The pack_filt_cont of this PacketFilterInfo.  # noqa: E501
        :type pack_filt_cont: PacketFilterContent
        :param tos_traffic_class: The tos_traffic_class of this PacketFilterInfo.  # noqa: E501
        :type tos_traffic_class: str
        :param spi: The spi of this PacketFilterInfo.  # noqa: E501
        :type spi: str
        :param flow_label: The flow_label of this PacketFilterInfo.  # noqa: E501
        :type flow_label: str
        :param flow_direction: The flow_direction of this PacketFilterInfo.  # noqa: E501
        :type flow_direction: FlowDirection
        """
        self.swagger_types = {
            'pack_filt_id': str,
            'pack_filt_cont': PacketFilterContent,
            'tos_traffic_class': str,
            'spi': str,
            'flow_label': str,
            'flow_direction': FlowDirection
        }

        self.attribute_map = {
            'pack_filt_id': 'packFiltId',
            'pack_filt_cont': 'packFiltCont',
            'tos_traffic_class': 'tosTrafficClass',
            'spi': 'spi',
            'flow_label': 'flowLabel',
            'flow_direction': 'flowDirection'
        }
        self._pack_filt_id = pack_filt_id
        self._pack_filt_cont = pack_filt_cont
        self._tos_traffic_class = tos_traffic_class
        self._spi = spi
        self._flow_label = flow_label
        self._flow_direction = flow_direction

    @classmethod
    def from_dict(cls, dikt) -> 'PacketFilterInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PacketFilterInfo of this PacketFilterInfo.  # noqa: E501
        :rtype: PacketFilterInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pack_filt_id(self) -> str:
        """Gets the pack_filt_id of this PacketFilterInfo.

        An identifier of packet filter.  # noqa: E501

        :return: The pack_filt_id of this PacketFilterInfo.
        :rtype: str
        """
        return self._pack_filt_id

    @pack_filt_id.setter
    def pack_filt_id(self, pack_filt_id: str):
        """Sets the pack_filt_id of this PacketFilterInfo.

        An identifier of packet filter.  # noqa: E501

        :param pack_filt_id: The pack_filt_id of this PacketFilterInfo.
        :type pack_filt_id: str
        """

        self._pack_filt_id = pack_filt_id

    @property
    def pack_filt_cont(self) -> PacketFilterContent:
        """Gets the pack_filt_cont of this PacketFilterInfo.


        :return: The pack_filt_cont of this PacketFilterInfo.
        :rtype: PacketFilterContent
        """
        return self._pack_filt_cont

    @pack_filt_cont.setter
    def pack_filt_cont(self, pack_filt_cont: PacketFilterContent):
        """Sets the pack_filt_cont of this PacketFilterInfo.


        :param pack_filt_cont: The pack_filt_cont of this PacketFilterInfo.
        :type pack_filt_cont: PacketFilterContent
        """

        self._pack_filt_cont = pack_filt_cont

    @property
    def tos_traffic_class(self) -> str:
        """Gets the tos_traffic_class of this PacketFilterInfo.

        Contains the Ipv4 Type-of-Service and mask field or the Ipv6 Traffic-Class field and mask field.  # noqa: E501

        :return: The tos_traffic_class of this PacketFilterInfo.
        :rtype: str
        """
        return self._tos_traffic_class

    @tos_traffic_class.setter
    def tos_traffic_class(self, tos_traffic_class: str):
        """Sets the tos_traffic_class of this PacketFilterInfo.

        Contains the Ipv4 Type-of-Service and mask field or the Ipv6 Traffic-Class field and mask field.  # noqa: E501

        :param tos_traffic_class: The tos_traffic_class of this PacketFilterInfo.
        :type tos_traffic_class: str
        """

        self._tos_traffic_class = tos_traffic_class

    @property
    def spi(self) -> str:
        """Gets the spi of this PacketFilterInfo.

        The security parameter index of the IPSec packet.  # noqa: E501

        :return: The spi of this PacketFilterInfo.
        :rtype: str
        """
        return self._spi

    @spi.setter
    def spi(self, spi: str):
        """Sets the spi of this PacketFilterInfo.

        The security parameter index of the IPSec packet.  # noqa: E501

        :param spi: The spi of this PacketFilterInfo.
        :type spi: str
        """

        self._spi = spi

    @property
    def flow_label(self) -> str:
        """Gets the flow_label of this PacketFilterInfo.

        The Ipv6 flow label header field.  # noqa: E501

        :return: The flow_label of this PacketFilterInfo.
        :rtype: str
        """
        return self._flow_label

    @flow_label.setter
    def flow_label(self, flow_label: str):
        """Sets the flow_label of this PacketFilterInfo.

        The Ipv6 flow label header field.  # noqa: E501

        :param flow_label: The flow_label of this PacketFilterInfo.
        :type flow_label: str
        """

        self._flow_label = flow_label

    @property
    def flow_direction(self) -> FlowDirection:
        """Gets the flow_direction of this PacketFilterInfo.


        :return: The flow_direction of this PacketFilterInfo.
        :rtype: FlowDirection
        """
        return self._flow_direction

    @flow_direction.setter
    def flow_direction(self, flow_direction: FlowDirection):
        """Sets the flow_direction of this PacketFilterInfo.


        :param flow_direction: The flow_direction of this PacketFilterInfo.
        :type flow_direction: FlowDirection
        """

        self._flow_direction = flow_direction
