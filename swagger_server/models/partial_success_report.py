# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.failure_cause import FailureCause  # noqa: F401,E501
from swagger_server.models.rule_report import RuleReport  # noqa: F401,E501
from swagger_server.models.session_rule_report import SessionRuleReport  # noqa: F401,E501
from swagger_server.models.ue_camping_rep import UeCampingRep  # noqa: F401,E501
from swagger_server import util


class PartialSuccessReport(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, failure_cause: FailureCause=None, rule_reports: List[RuleReport]=None, sess_rule_reports: List[SessionRuleReport]=None, ue_camping_rep: UeCampingRep=None):  # noqa: E501
        """PartialSuccessReport - a model defined in Swagger

        :param failure_cause: The failure_cause of this PartialSuccessReport.  # noqa: E501
        :type failure_cause: FailureCause
        :param rule_reports: The rule_reports of this PartialSuccessReport.  # noqa: E501
        :type rule_reports: List[RuleReport]
        :param sess_rule_reports: The sess_rule_reports of this PartialSuccessReport.  # noqa: E501
        :type sess_rule_reports: List[SessionRuleReport]
        :param ue_camping_rep: The ue_camping_rep of this PartialSuccessReport.  # noqa: E501
        :type ue_camping_rep: UeCampingRep
        """
        self.swagger_types = {
            'failure_cause': FailureCause,
            'rule_reports': List[RuleReport],
            'sess_rule_reports': List[SessionRuleReport],
            'ue_camping_rep': UeCampingRep
        }

        self.attribute_map = {
            'failure_cause': 'failureCause',
            'rule_reports': 'ruleReports',
            'sess_rule_reports': 'sessRuleReports',
            'ue_camping_rep': 'ueCampingRep'
        }
        self._failure_cause = failure_cause
        self._rule_reports = rule_reports
        self._sess_rule_reports = sess_rule_reports
        self._ue_camping_rep = ue_camping_rep

    @classmethod
    def from_dict(cls, dikt) -> 'PartialSuccessReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PartialSuccessReport of this PartialSuccessReport.  # noqa: E501
        :rtype: PartialSuccessReport
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failure_cause(self) -> FailureCause:
        """Gets the failure_cause of this PartialSuccessReport.


        :return: The failure_cause of this PartialSuccessReport.
        :rtype: FailureCause
        """
        return self._failure_cause

    @failure_cause.setter
    def failure_cause(self, failure_cause: FailureCause):
        """Sets the failure_cause of this PartialSuccessReport.


        :param failure_cause: The failure_cause of this PartialSuccessReport.
        :type failure_cause: FailureCause
        """
        if failure_cause is None:
            raise ValueError("Invalid value for `failure_cause`, must not be `None`")  # noqa: E501

        self._failure_cause = failure_cause

    @property
    def rule_reports(self) -> List[RuleReport]:
        """Gets the rule_reports of this PartialSuccessReport.

        Information about the PCC rules provisioned by the PCF not successfully installed/activated.  # noqa: E501

        :return: The rule_reports of this PartialSuccessReport.
        :rtype: List[RuleReport]
        """
        return self._rule_reports

    @rule_reports.setter
    def rule_reports(self, rule_reports: List[RuleReport]):
        """Sets the rule_reports of this PartialSuccessReport.

        Information about the PCC rules provisioned by the PCF not successfully installed/activated.  # noqa: E501

        :param rule_reports: The rule_reports of this PartialSuccessReport.
        :type rule_reports: List[RuleReport]
        """

        self._rule_reports = rule_reports

    @property
    def sess_rule_reports(self) -> List[SessionRuleReport]:
        """Gets the sess_rule_reports of this PartialSuccessReport.

        Information about the session rules provisioned by the PCF not successfully installed.  # noqa: E501

        :return: The sess_rule_reports of this PartialSuccessReport.
        :rtype: List[SessionRuleReport]
        """
        return self._sess_rule_reports

    @sess_rule_reports.setter
    def sess_rule_reports(self, sess_rule_reports: List[SessionRuleReport]):
        """Sets the sess_rule_reports of this PartialSuccessReport.

        Information about the session rules provisioned by the PCF not successfully installed.  # noqa: E501

        :param sess_rule_reports: The sess_rule_reports of this PartialSuccessReport.
        :type sess_rule_reports: List[SessionRuleReport]
        """

        self._sess_rule_reports = sess_rule_reports

    @property
    def ue_camping_rep(self) -> UeCampingRep:
        """Gets the ue_camping_rep of this PartialSuccessReport.


        :return: The ue_camping_rep of this PartialSuccessReport.
        :rtype: UeCampingRep
        """
        return self._ue_camping_rep

    @ue_camping_rep.setter
    def ue_camping_rep(self, ue_camping_rep: UeCampingRep):
        """Sets the ue_camping_rep of this PartialSuccessReport.


        :param ue_camping_rep: The ue_camping_rep of this PartialSuccessReport.
        :type ue_camping_rep: UeCampingRep
        """

        self._ue_camping_rep = ue_camping_rep
