# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.arp import Arp  # noqa: F401,E501
from swagger_server.models.aver_window_rm import AverWindowRm  # noqa: F401,E501
from swagger_server.models.bit_rate_rm import BitRateRm  # noqa: F401,E501
from swagger_server.models.max_data_burst_vol_rm import MaxDataBurstVolRm  # noqa: F401,E501
from swagger_server.models.model5_qi import Model5Qi  # noqa: F401,E501
from swagger_server.models.model5_qi_priority_level_rm import Model5QiPriorityLevelRm  # noqa: F401,E501
from swagger_server.models.packet_loss_rate_rm import PacketLossRateRm  # noqa: F401,E501
from swagger_server import util


class QosData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, qos_id: str=None, _5qi: Model5Qi=None, maxbr_ul: BitRateRm=None, maxbr_dl: BitRateRm=None, gbr_ul: BitRateRm=None, gbr_dl: BitRateRm=None, arp: Arp=None, qnc: bool=None, priority_level: Model5QiPriorityLevelRm=None, aver_window: AverWindowRm=None, max_data_burst_vol: MaxDataBurstVolRm=None, reflective_qos: bool=None, sharing_key_dl: str=None, sharing_key_ul: str=None, max_packet_loss_rate_dl: PacketLossRateRm=None, max_packet_loss_rate_ul: PacketLossRateRm=None, def_qos_flow_indication: bool=None):  # noqa: E501
        """QosData - a model defined in Swagger

        :param qos_id: The qos_id of this QosData.  # noqa: E501
        :type qos_id: str
        :param _5qi: The _5qi of this QosData.  # noqa: E501
        :type _5qi: Model5Qi
        :param maxbr_ul: The maxbr_ul of this QosData.  # noqa: E501
        :type maxbr_ul: BitRateRm
        :param maxbr_dl: The maxbr_dl of this QosData.  # noqa: E501
        :type maxbr_dl: BitRateRm
        :param gbr_ul: The gbr_ul of this QosData.  # noqa: E501
        :type gbr_ul: BitRateRm
        :param gbr_dl: The gbr_dl of this QosData.  # noqa: E501
        :type gbr_dl: BitRateRm
        :param arp: The arp of this QosData.  # noqa: E501
        :type arp: Arp
        :param qnc: The qnc of this QosData.  # noqa: E501
        :type qnc: bool
        :param priority_level: The priority_level of this QosData.  # noqa: E501
        :type priority_level: Model5QiPriorityLevelRm
        :param aver_window: The aver_window of this QosData.  # noqa: E501
        :type aver_window: AverWindowRm
        :param max_data_burst_vol: The max_data_burst_vol of this QosData.  # noqa: E501
        :type max_data_burst_vol: MaxDataBurstVolRm
        :param reflective_qos: The reflective_qos of this QosData.  # noqa: E501
        :type reflective_qos: bool
        :param sharing_key_dl: The sharing_key_dl of this QosData.  # noqa: E501
        :type sharing_key_dl: str
        :param sharing_key_ul: The sharing_key_ul of this QosData.  # noqa: E501
        :type sharing_key_ul: str
        :param max_packet_loss_rate_dl: The max_packet_loss_rate_dl of this QosData.  # noqa: E501
        :type max_packet_loss_rate_dl: PacketLossRateRm
        :param max_packet_loss_rate_ul: The max_packet_loss_rate_ul of this QosData.  # noqa: E501
        :type max_packet_loss_rate_ul: PacketLossRateRm
        :param def_qos_flow_indication: The def_qos_flow_indication of this QosData.  # noqa: E501
        :type def_qos_flow_indication: bool
        """
        self.swagger_types = {
            'qos_id': str,
            '_5qi': Model5Qi,
            'maxbr_ul': BitRateRm,
            'maxbr_dl': BitRateRm,
            'gbr_ul': BitRateRm,
            'gbr_dl': BitRateRm,
            'arp': Arp,
            'qnc': bool,
            'priority_level': Model5QiPriorityLevelRm,
            'aver_window': AverWindowRm,
            'max_data_burst_vol': MaxDataBurstVolRm,
            'reflective_qos': bool,
            'sharing_key_dl': str,
            'sharing_key_ul': str,
            'max_packet_loss_rate_dl': PacketLossRateRm,
            'max_packet_loss_rate_ul': PacketLossRateRm,
            'def_qos_flow_indication': bool
        }

        self.attribute_map = {
            'qos_id': 'qosId',
            '_5qi': '5qi',
            'maxbr_ul': 'maxbrUl',
            'maxbr_dl': 'maxbrDl',
            'gbr_ul': 'gbrUl',
            'gbr_dl': 'gbrDl',
            'arp': 'arp',
            'qnc': 'qnc',
            'priority_level': 'priorityLevel',
            'aver_window': 'averWindow',
            'max_data_burst_vol': 'maxDataBurstVol',
            'reflective_qos': 'reflectiveQos',
            'sharing_key_dl': 'sharingKeyDl',
            'sharing_key_ul': 'sharingKeyUl',
            'max_packet_loss_rate_dl': 'maxPacketLossRateDl',
            'max_packet_loss_rate_ul': 'maxPacketLossRateUl',
            'def_qos_flow_indication': 'defQosFlowIndication'
        }
        self._qos_id = qos_id
        self.__5qi = _5qi
        self._maxbr_ul = maxbr_ul
        self._maxbr_dl = maxbr_dl
        self._gbr_ul = gbr_ul
        self._gbr_dl = gbr_dl
        self._arp = arp
        self._qnc = qnc
        self._priority_level = priority_level
        self._aver_window = aver_window
        self._max_data_burst_vol = max_data_burst_vol
        self._reflective_qos = reflective_qos
        self._sharing_key_dl = sharing_key_dl
        self._sharing_key_ul = sharing_key_ul
        self._max_packet_loss_rate_dl = max_packet_loss_rate_dl
        self._max_packet_loss_rate_ul = max_packet_loss_rate_ul
        self._def_qos_flow_indication = def_qos_flow_indication

    @classmethod
    def from_dict(cls, dikt) -> 'QosData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The QosData of this QosData.  # noqa: E501
        :rtype: QosData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def qos_id(self) -> str:
        """Gets the qos_id of this QosData.

        Univocally identifies the QoS control policy data within a PDU session.  # noqa: E501

        :return: The qos_id of this QosData.
        :rtype: str
        """
        return self._qos_id

    @qos_id.setter
    def qos_id(self, qos_id: str):
        """Sets the qos_id of this QosData.

        Univocally identifies the QoS control policy data within a PDU session.  # noqa: E501

        :param qos_id: The qos_id of this QosData.
        :type qos_id: str
        """
        if qos_id is None:
            raise ValueError("Invalid value for `qos_id`, must not be `None`")  # noqa: E501

        self._qos_id = qos_id

    @property
    def _5qi(self) -> Model5Qi:
        """Gets the _5qi of this QosData.


        :return: The _5qi of this QosData.
        :rtype: Model5Qi
        """
        return self.__5qi

    @_5qi.setter
    def _5qi(self, _5qi: Model5Qi):
        """Sets the _5qi of this QosData.


        :param _5qi: The _5qi of this QosData.
        :type _5qi: Model5Qi
        """

        self.__5qi = _5qi

    @property
    def maxbr_ul(self) -> BitRateRm:
        """Gets the maxbr_ul of this QosData.


        :return: The maxbr_ul of this QosData.
        :rtype: BitRateRm
        """
        return self._maxbr_ul

    @maxbr_ul.setter
    def maxbr_ul(self, maxbr_ul: BitRateRm):
        """Sets the maxbr_ul of this QosData.


        :param maxbr_ul: The maxbr_ul of this QosData.
        :type maxbr_ul: BitRateRm
        """

        self._maxbr_ul = maxbr_ul

    @property
    def maxbr_dl(self) -> BitRateRm:
        """Gets the maxbr_dl of this QosData.


        :return: The maxbr_dl of this QosData.
        :rtype: BitRateRm
        """
        return self._maxbr_dl

    @maxbr_dl.setter
    def maxbr_dl(self, maxbr_dl: BitRateRm):
        """Sets the maxbr_dl of this QosData.


        :param maxbr_dl: The maxbr_dl of this QosData.
        :type maxbr_dl: BitRateRm
        """

        self._maxbr_dl = maxbr_dl

    @property
    def gbr_ul(self) -> BitRateRm:
        """Gets the gbr_ul of this QosData.


        :return: The gbr_ul of this QosData.
        :rtype: BitRateRm
        """
        return self._gbr_ul

    @gbr_ul.setter
    def gbr_ul(self, gbr_ul: BitRateRm):
        """Sets the gbr_ul of this QosData.


        :param gbr_ul: The gbr_ul of this QosData.
        :type gbr_ul: BitRateRm
        """

        self._gbr_ul = gbr_ul

    @property
    def gbr_dl(self) -> BitRateRm:
        """Gets the gbr_dl of this QosData.


        :return: The gbr_dl of this QosData.
        :rtype: BitRateRm
        """
        return self._gbr_dl

    @gbr_dl.setter
    def gbr_dl(self, gbr_dl: BitRateRm):
        """Sets the gbr_dl of this QosData.


        :param gbr_dl: The gbr_dl of this QosData.
        :type gbr_dl: BitRateRm
        """

        self._gbr_dl = gbr_dl

    @property
    def arp(self) -> Arp:
        """Gets the arp of this QosData.


        :return: The arp of this QosData.
        :rtype: Arp
        """
        return self._arp

    @arp.setter
    def arp(self, arp: Arp):
        """Sets the arp of this QosData.


        :param arp: The arp of this QosData.
        :type arp: Arp
        """

        self._arp = arp

    @property
    def qnc(self) -> bool:
        """Gets the qnc of this QosData.

        Indicates whether notifications are requested from 3GPP NG-RAN when the GFBR can no longer (or again) be guaranteed for a QoS Flow during the lifetime of the QoS Flow.  # noqa: E501

        :return: The qnc of this QosData.
        :rtype: bool
        """
        return self._qnc

    @qnc.setter
    def qnc(self, qnc: bool):
        """Sets the qnc of this QosData.

        Indicates whether notifications are requested from 3GPP NG-RAN when the GFBR can no longer (or again) be guaranteed for a QoS Flow during the lifetime of the QoS Flow.  # noqa: E501

        :param qnc: The qnc of this QosData.
        :type qnc: bool
        """

        self._qnc = qnc

    @property
    def priority_level(self) -> Model5QiPriorityLevelRm:
        """Gets the priority_level of this QosData.


        :return: The priority_level of this QosData.
        :rtype: Model5QiPriorityLevelRm
        """
        return self._priority_level

    @priority_level.setter
    def priority_level(self, priority_level: Model5QiPriorityLevelRm):
        """Sets the priority_level of this QosData.


        :param priority_level: The priority_level of this QosData.
        :type priority_level: Model5QiPriorityLevelRm
        """

        self._priority_level = priority_level

    @property
    def aver_window(self) -> AverWindowRm:
        """Gets the aver_window of this QosData.


        :return: The aver_window of this QosData.
        :rtype: AverWindowRm
        """
        return self._aver_window

    @aver_window.setter
    def aver_window(self, aver_window: AverWindowRm):
        """Sets the aver_window of this QosData.


        :param aver_window: The aver_window of this QosData.
        :type aver_window: AverWindowRm
        """

        self._aver_window = aver_window

    @property
    def max_data_burst_vol(self) -> MaxDataBurstVolRm:
        """Gets the max_data_burst_vol of this QosData.


        :return: The max_data_burst_vol of this QosData.
        :rtype: MaxDataBurstVolRm
        """
        return self._max_data_burst_vol

    @max_data_burst_vol.setter
    def max_data_burst_vol(self, max_data_burst_vol: MaxDataBurstVolRm):
        """Sets the max_data_burst_vol of this QosData.


        :param max_data_burst_vol: The max_data_burst_vol of this QosData.
        :type max_data_burst_vol: MaxDataBurstVolRm
        """

        self._max_data_burst_vol = max_data_burst_vol

    @property
    def reflective_qos(self) -> bool:
        """Gets the reflective_qos of this QosData.

        Indicates whether the QoS information is reflective for the corresponding service data flow.  # noqa: E501

        :return: The reflective_qos of this QosData.
        :rtype: bool
        """
        return self._reflective_qos

    @reflective_qos.setter
    def reflective_qos(self, reflective_qos: bool):
        """Sets the reflective_qos of this QosData.

        Indicates whether the QoS information is reflective for the corresponding service data flow.  # noqa: E501

        :param reflective_qos: The reflective_qos of this QosData.
        :type reflective_qos: bool
        """

        self._reflective_qos = reflective_qos

    @property
    def sharing_key_dl(self) -> str:
        """Gets the sharing_key_dl of this QosData.

        Indicates, by containing the same value, what PCC rules may share resource in downlink direction.  # noqa: E501

        :return: The sharing_key_dl of this QosData.
        :rtype: str
        """
        return self._sharing_key_dl

    @sharing_key_dl.setter
    def sharing_key_dl(self, sharing_key_dl: str):
        """Sets the sharing_key_dl of this QosData.

        Indicates, by containing the same value, what PCC rules may share resource in downlink direction.  # noqa: E501

        :param sharing_key_dl: The sharing_key_dl of this QosData.
        :type sharing_key_dl: str
        """

        self._sharing_key_dl = sharing_key_dl

    @property
    def sharing_key_ul(self) -> str:
        """Gets the sharing_key_ul of this QosData.

        Indicates, by containing the same value, what PCC rules may share resource in uplink direction.  # noqa: E501

        :return: The sharing_key_ul of this QosData.
        :rtype: str
        """
        return self._sharing_key_ul

    @sharing_key_ul.setter
    def sharing_key_ul(self, sharing_key_ul: str):
        """Sets the sharing_key_ul of this QosData.

        Indicates, by containing the same value, what PCC rules may share resource in uplink direction.  # noqa: E501

        :param sharing_key_ul: The sharing_key_ul of this QosData.
        :type sharing_key_ul: str
        """

        self._sharing_key_ul = sharing_key_ul

    @property
    def max_packet_loss_rate_dl(self) -> PacketLossRateRm:
        """Gets the max_packet_loss_rate_dl of this QosData.


        :return: The max_packet_loss_rate_dl of this QosData.
        :rtype: PacketLossRateRm
        """
        return self._max_packet_loss_rate_dl

    @max_packet_loss_rate_dl.setter
    def max_packet_loss_rate_dl(self, max_packet_loss_rate_dl: PacketLossRateRm):
        """Sets the max_packet_loss_rate_dl of this QosData.


        :param max_packet_loss_rate_dl: The max_packet_loss_rate_dl of this QosData.
        :type max_packet_loss_rate_dl: PacketLossRateRm
        """

        self._max_packet_loss_rate_dl = max_packet_loss_rate_dl

    @property
    def max_packet_loss_rate_ul(self) -> PacketLossRateRm:
        """Gets the max_packet_loss_rate_ul of this QosData.


        :return: The max_packet_loss_rate_ul of this QosData.
        :rtype: PacketLossRateRm
        """
        return self._max_packet_loss_rate_ul

    @max_packet_loss_rate_ul.setter
    def max_packet_loss_rate_ul(self, max_packet_loss_rate_ul: PacketLossRateRm):
        """Sets the max_packet_loss_rate_ul of this QosData.


        :param max_packet_loss_rate_ul: The max_packet_loss_rate_ul of this QosData.
        :type max_packet_loss_rate_ul: PacketLossRateRm
        """

        self._max_packet_loss_rate_ul = max_packet_loss_rate_ul

    @property
    def def_qos_flow_indication(self) -> bool:
        """Gets the def_qos_flow_indication of this QosData.

        Indicates that the dynamic PCC rule shall always have its binding with the QoS Flow associated with the default QoS rule  # noqa: E501

        :return: The def_qos_flow_indication of this QosData.
        :rtype: bool
        """
        return self._def_qos_flow_indication

    @def_qos_flow_indication.setter
    def def_qos_flow_indication(self, def_qos_flow_indication: bool):
        """Sets the def_qos_flow_indication of this QosData.

        Indicates that the dynamic PCC rule shall always have its binding with the QoS Flow associated with the default QoS rule  # noqa: E501

        :param def_qos_flow_indication: The def_qos_flow_indication of this QosData.
        :type def_qos_flow_indication: bool
        """

        self._def_qos_flow_indication = def_qos_flow_indication
