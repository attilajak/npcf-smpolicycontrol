# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.bit_rate import BitRate  # noqa: F401,E501
from swagger_server import util


class Ambr(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, uplink: BitRate=None, downlink: BitRate=None):  # noqa: E501
        """Ambr - a model defined in Swagger

        :param uplink: The uplink of this Ambr.  # noqa: E501
        :type uplink: BitRate
        :param downlink: The downlink of this Ambr.  # noqa: E501
        :type downlink: BitRate
        """
        self.swagger_types = {
            'uplink': BitRate,
            'downlink': BitRate
        }

        self.attribute_map = {
            'uplink': 'uplink',
            'downlink': 'downlink'
        }
        self._uplink = uplink
        self._downlink = downlink

    @classmethod
    def from_dict(cls, dikt) -> 'Ambr':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Ambr of this Ambr.  # noqa: E501
        :rtype: Ambr
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uplink(self) -> BitRate:
        """Gets the uplink of this Ambr.


        :return: The uplink of this Ambr.
        :rtype: BitRate
        """
        return self._uplink

    @uplink.setter
    def uplink(self, uplink: BitRate):
        """Sets the uplink of this Ambr.


        :param uplink: The uplink of this Ambr.
        :type uplink: BitRate
        """
        if uplink is None:
            raise ValueError("Invalid value for `uplink`, must not be `None`")  # noqa: E501

        self._uplink = uplink

    @property
    def downlink(self) -> BitRate:
        """Gets the downlink of this Ambr.


        :return: The downlink of this Ambr.
        :rtype: BitRate
        """
        return self._downlink

    @downlink.setter
    def downlink(self, downlink: BitRate):
        """Sets the downlink of this Ambr.


        :param downlink: The downlink of this Ambr.
        :type downlink: BitRate
        """
        if downlink is None:
            raise ValueError("Invalid value for `downlink`, must not be `None`")  # noqa: E501

        self._downlink = downlink
