# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.arp_priority_level import ArpPriorityLevel  # noqa: F401,E501
from swagger_server.models.preemption_capability import PreemptionCapability  # noqa: F401,E501
from swagger_server.models.preemption_vulnerability import PreemptionVulnerability  # noqa: F401,E501
from swagger_server import util


class Arp(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, priority_level: ArpPriorityLevel=None, preempt_cap: PreemptionCapability=None, preempt_vuln: PreemptionVulnerability=None):  # noqa: E501
        """Arp - a model defined in Swagger

        :param priority_level: The priority_level of this Arp.  # noqa: E501
        :type priority_level: ArpPriorityLevel
        :param preempt_cap: The preempt_cap of this Arp.  # noqa: E501
        :type preempt_cap: PreemptionCapability
        :param preempt_vuln: The preempt_vuln of this Arp.  # noqa: E501
        :type preempt_vuln: PreemptionVulnerability
        """
        self.swagger_types = {
            'priority_level': ArpPriorityLevel,
            'preempt_cap': PreemptionCapability,
            'preempt_vuln': PreemptionVulnerability
        }

        self.attribute_map = {
            'priority_level': 'priorityLevel',
            'preempt_cap': 'preemptCap',
            'preempt_vuln': 'preemptVuln'
        }
        self._priority_level = priority_level
        self._preempt_cap = preempt_cap
        self._preempt_vuln = preempt_vuln

    @classmethod
    def from_dict(cls, dikt) -> 'Arp':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Arp of this Arp.  # noqa: E501
        :rtype: Arp
        """
        return util.deserialize_model(dikt, cls)

    @property
    def priority_level(self) -> ArpPriorityLevel:
        """Gets the priority_level of this Arp.


        :return: The priority_level of this Arp.
        :rtype: ArpPriorityLevel
        """
        return self._priority_level

    @priority_level.setter
    def priority_level(self, priority_level: ArpPriorityLevel):
        """Sets the priority_level of this Arp.


        :param priority_level: The priority_level of this Arp.
        :type priority_level: ArpPriorityLevel
        """
        if priority_level is None:
            raise ValueError("Invalid value for `priority_level`, must not be `None`")  # noqa: E501

        self._priority_level = priority_level

    @property
    def preempt_cap(self) -> PreemptionCapability:
        """Gets the preempt_cap of this Arp.


        :return: The preempt_cap of this Arp.
        :rtype: PreemptionCapability
        """
        return self._preempt_cap

    @preempt_cap.setter
    def preempt_cap(self, preempt_cap: PreemptionCapability):
        """Sets the preempt_cap of this Arp.


        :param preempt_cap: The preempt_cap of this Arp.
        :type preempt_cap: PreemptionCapability
        """
        if preempt_cap is None:
            raise ValueError("Invalid value for `preempt_cap`, must not be `None`")  # noqa: E501

        self._preempt_cap = preempt_cap

    @property
    def preempt_vuln(self) -> PreemptionVulnerability:
        """Gets the preempt_vuln of this Arp.


        :return: The preempt_vuln of this Arp.
        :rtype: PreemptionVulnerability
        """
        return self._preempt_vuln

    @preempt_vuln.setter
    def preempt_vuln(self, preempt_vuln: PreemptionVulnerability):
        """Sets the preempt_vuln of this Arp.


        :param preempt_vuln: The preempt_vuln of this Arp.
        :type preempt_vuln: PreemptionVulnerability
        """
        if preempt_vuln is None:
            raise ValueError("Invalid value for `preempt_vuln`, must not be `None`")  # noqa: E501

        self._preempt_vuln = preempt_vuln
